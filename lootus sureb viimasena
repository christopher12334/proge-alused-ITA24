import tkinter as tk
from tkinter import ttk
from datetime import datetime

class AutomaksKalkulaator:
    def __init__(self, root):
        self.root = root
        self.root.title("Automaksu Kalkulaator")
        self.root.configure(bg="#E6F0FA")

        self.soiduki_tuubid = ["Sõiduauto", "Kaubik", "Mootorratas/ATV", "Ratasmaastikusõiduk", "Traktor"]
        self.mootori_tuubid = ["Bensiin", "Diisel", "Elektriline", "Hübriid", "Pistikhübriid"]
        self.co2_standardid = ["WLTP", "NEDC", "Puudub"]

        self.create_widgets()

    def create_widgets(self):
        ttk.Label(self.root, text="AUTOMAKSU KALKULAATOR", font=("Arial", 16, "bold"), background="#E6F0FA").pack(pady=10)

        frame = ttk.Frame(self.root, padding=10)
        frame.pack()

        ttk.Label(frame, text="Vali sõiduki tüüp:", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w")

        self.soiduki_valik = tk.StringVar()
        self.soiduki_valik.trace("w", self.update_mootorid)

        for i, tuup in enumerate(self.soiduki_tuubid):
            ttk.Radiobutton(frame, text=tuup, variable=self.soiduki_valik, value=tuup).grid(row=i + 1, column=0, sticky="w")

        self.mootori_valik = tk.StringVar()
        self.mootori_valik.trace("w", self.update_fields)

        self.mootori_frame = ttk.Frame(self.root, padding=10)
        self.mootori_frame.pack()

        self.form_frame = ttk.Frame(self.root, padding=10)
        self.form_frame.pack()

        self.calculate_button = ttk.Button(self.root, text="Arvuta maks", command=self.calculate_tax)
        self.calculate_button.pack(pady=10)

        self.result_label = ttk.Label(self.root, text="", font=("Arial", 12, "bold"), background="#E6F0FA")
        self.result_label.pack(pady=10)

    def update_mootorid(self, *args):
        for widget in self.mootori_frame.winfo_children():
            widget.destroy()

        if self.soiduki_valik.get() in ["Sõiduauto", "Kaubik"]:
            ttk.Label(self.mootori_frame, text="Vali mootori tüüp:", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w")
            for i, mootor in enumerate(self.mootori_tuubid):
                ttk.Radiobutton(self.mootori_frame, text=mootor, variable=self.mootori_valik, value=mootor).grid(row=i + 1, column=0, sticky="w")
        else:
            self.mootori_valik.set("")
        self.update_fields()

    def update_fields(self, *args):
        for widget in self.form_frame.winfo_children():
            widget.destroy()

        self.entries = {}
        vehicle = self.soiduki_valik.get()

        if not vehicle:
            return

        row = 0
        ttk.Label(self.form_frame, text="Esmaregistreerimise aasta:", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
        self.entries["Esmaregistreerimine"] = ttk.Entry(self.form_frame)
        self.entries["Esmaregistreerimine"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
        row += 1

        if vehicle in ["Sõiduauto", "Kaubik"]:
            ttk.Label(self.form_frame, text="Täismass (kg):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
            self.entries["Täismass"] = ttk.Entry(self.form_frame)
            self.entries["Täismass"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
            row += 1

            if self.mootori_valik.get() in ["Bensiin", "Diisel", "Hübriid"]:
                ttk.Label(self.form_frame, text="CO₂ heitkogus (g/km, WLTP):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
                self.entries["CO2"] = ttk.Entry(self.form_frame)
                self.entries["CO2"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
                row += 1


    def calculate_tax(self):
        try:
            vehicle = self.soiduki_valik.get()
            mootori_tuup = self.mootori_valik.get()
            reg_year = int(self.entries["Esmaregistreerimine"].get())
            current_year = datetime.now().year
            age = current_year - reg_year
            total_tax = 0

            if mootori_tuup in ["Bensiin", "Diisel", "Hübriid"]:

                if vehicle == "Sõiduauto":
                    mass = float(self.entries["Täismass"].get())
                    co2_value = float(self.entries["CO2"].get())

                    if co2_value <= 117:
                        co2_tax = 0
                    elif 118 <= co2_value <= 150:
                        co2_tax = (co2_value - 117) * 3
                    elif 151 <= co2_value <= 200:
                        co2_tax = (co2_value - 150) * 3.5 + (150 - 117) * 3
                    else:
                        co2_tax = (co2_value - 200) * 4 + (200 - 150) * 3.5 + (150 - 117) * 3

                    if mass > 2000:
                        mass_tax = (mass - 2000) * 0.40
                        if mass > 3000:
                            mass_tax = 400
                    else:
                        mass_tax = 0

                    total_tax = co2_tax + mass_tax

            if mootori_tuup in ["Elektriline",]:

                if vehicle == "Sõiduauto":
                    mass = float(self.entries["Täismass"].get())
                    if mass > 2400:
                        mass_tax = (mass - 2400) * 0.40
                        if mass > 3500:
                            mass_tax = 440
                    else:
                        mass_tax = 0

                    total_tax = mass_tax

            if mootori_tuup in ["Pistikhübriid"]:

                if vehicle == "Sõiduauto":
                    mass = float(self.entries["Täismass"].get())
                    if mass > 2200:
                        mass_tax = (mass - 2200) * 0.40
                        if mass > 3500:
                            mass_tax = 440
                    else:
                        mass_tax = 0

                    total_tax = mass_tax

            # Vanuse kordaja
            if age >= 20:
                age_multiplier = 0.00

            elif age >= 16:
                age_multiplier = 0.10

            elif age >= 15:
                age_multiplier = 0.18

            elif age >= 14:
                age_multiplier = 0.26

            elif age >= 13:
                age_multiplier = 0.35

            elif age >= 12:
                age_multiplier = 0.43

            elif age >= 11:
                age_multiplier = 0.51

            elif age >= 10:
                age_multiplier = 0.59

            elif age >= 9:
                age_multiplier = 0.67

            elif age >= 8:
                age_multiplier = 0.75

            elif age >= 7:
                age_multiplier = 0.84

            elif age >= 6:
                age_multiplier = 0.92

            else:
                age_multiplier = 1

            total_tax *= age_multiplier
            total_tax += 50




            self.result_label.config(text=f"Arvutatud maksumus: {total_tax:.2f} €")
        except Exception as e:
            self.result_label.config(text=f"Tekkis viga: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = AutomaksKalkulaator(root)
    root.mainloop()
