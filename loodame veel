import tkinter as tk
from tkinter import ttk
from datetime import datetime

class AutomaksKalkulaator:
    def __init__(self, root):
        self.root = root
        self.root.title("Automaksu Kalkulaator")
        self.root.configure(bg="#E6F0FA")

        self.soiduki_tuubid = ["Sõiduauto", "Kaubik", "Mootorratas/ATV", "Ratasmaastikusõiduk", "Traktor"]
        self.mootori_tuubid = ["Bensiin", "Diisel", "Elektriline", "Hübriid", "Pistikhübriid"]
        self.co2_standardid = ["WLTP", "NEDC", "Puudub"]

        self.create_widgets()

    def create_widgets(self):
        ttk.Label(self.root, text="AUTOMAKSU KALKULAATOR", font=("Arial", 16, "bold"), background="#E6F0FA").pack(pady=10)

        frame = ttk.Frame(self.root, padding=10)
        frame.pack()

        ttk.Label(frame, text="Vali sõiduki tüüp:", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w")

        self.soiduki_valik = tk.StringVar()
        self.soiduki_valik.trace("w", self.update_mootorid)

        for i, tuup in enumerate(self.soiduki_tuubid):
            ttk.Radiobutton(frame, text=tuup, variable=self.soiduki_valik, value=tuup).grid(row=i+1, column=0, sticky="w")

        self.mootori_valik = tk.StringVar()
        self.mootori_valik.trace("w", self.update_fields)

        self.mootori_frame = ttk.Frame(self.root, padding=10)
        self.mootori_frame.pack()

        self.form_frame = ttk.Frame(self.root, padding=10)
        self.form_frame.pack()

        self.calculate_button = ttk.Button(self.root, text="Arvuta maks", command=self.calculate_tax)
        self.calculate_button.pack(pady=10)

        self.result_label = ttk.Label(self.root, text="", font=("Arial", 12, "bold"), background="#E6F0FA")
        self.result_label.pack(pady=10)

    def update_mootorid(self, *args):
        # Eemaldab olemasolevad mootori valikud
        for widget in self.mootori_frame.winfo_children():
            widget.destroy()

        if self.soiduki_valik.get() in ["Sõiduauto", "Kaubik"]:
            ttk.Label(self.mootori_frame, text="Vali mootori tüüp:", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w")
            for i, mootor in enumerate(self.mootori_tuubid):
                ttk.Radiobutton(self.mootori_frame, text=mootor, variable=self.mootori_valik, value=mootor).grid(row=i+1, column=0, sticky="w")
        else:
            self.mootori_valik.set("")
        self.update_fields()

    def update_fields(self, *args):
        # Eemaldab olemasolevad sisestusväljad
        for widget in self.form_frame.winfo_children():
            widget.destroy()

        self.entries = {}
        vehicle = self.soiduki_valik.get()
        engine = self.mootori_valik.get()

        if not vehicle:
            return

        row = 0
        # Esmaregistreerimise kuupäeva sisend
        ttk.Label(self.form_frame, text="Esmaregistreerimise kuupäev (YYYY-MM-DD):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
        self.entries["Esmaregistreerimine"] = ttk.Entry(self.form_frame)
        self.entries["Esmaregistreerimine"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
        row += 1

        if vehicle == "Sõiduauto":
            ttk.Label(self.form_frame, text="Täismass (kg):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
            self.entries["Täismass"] = ttk.Entry(self.form_frame)
            self.entries["Täismass"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
            row += 1

            if engine in ["Bensiin", "Diisel", "Hübriid"]:
                ttk.Label(self.form_frame, text="Vali CO₂ heitme standard:", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
                self.co2_valik = tk.StringVar()
                self.co2_valik.trace("w", self.update_co2_field)
                col = 1
                for std in self.co2_standardid:
                    ttk.Radiobutton(self.form_frame, text=std, variable=self.co2_valik, value=std).grid(row=row, column=col, sticky="w", padx=5)
                    col += 1
                row += 1

        elif vehicle == "Kaubik":
            ttk.Label(self.form_frame, text="Täismass (kg):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
            self.entries["Täismass"] = ttk.Entry(self.form_frame)
            self.entries["Täismass"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
            row += 1

            if engine in ["Bensiin", "Diisel", "Hübriid"]:
                ttk.Label(self.form_frame, text="Vali CO₂ heitme standard:", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
                self.co2_valik = tk.StringVar()
                self.co2_valik.trace("w", self.update_co2_field)
                col = 1
                for std in self.co2_standardid:
                    ttk.Radiobutton(self.form_frame, text=std, variable=self.co2_valik, value=std).grid(row=row, column=col, sticky="w", padx=5)
                    col += 1
                row += 1

        elif vehicle in ["Mootorratas/ATV", "Ratasmaastikusõiduk", "Traktor"]:
            ttk.Label(self.form_frame, text="Töömaht (cm³):", font=("Arial", 10)).grid(row=row, column=0, sticky="w", pady=2)
            self.entries["Töömaht (cm³)"] = ttk.Entry(self.form_frame)
            self.entries["Töömaht (cm³)"].grid(row=row, column=1, sticky="w", pady=2, padx=5)
            row += 1

    def update_co2_field(self, *args):
        # Eemaldame varasemad CO₂-ga seotud väljad
        for widget in self.form_frame.winfo_children():
            if getattr(widget, "is_extra_field", False):
                widget.destroy()

        # Leiame järgmise vaba rea
        current_rows = [int(widget.grid_info()["row"]) for widget in self.form_frame.winfo_children() if widget.grid_info().get("row") is not None]
        row = max(current_rows) + 1 if current_rows else 0

        if self.co2_valik.get() in ["WLTP", "NEDC"]:
            lbl = ttk.Label(self.form_frame, text="CO₂ heitkogus (g/km):", font=("Arial", 10))
            lbl.grid(row=row, column=0, sticky="w", pady=2)
            lbl.is_extra_field = True
            entry = ttk.Entry(self.form_frame)
            entry.grid(row=row, column=1, sticky="w", pady=2, padx=5)
            entry.is_extra_field = True
            self.entries["CO2"] = entry
        elif self.co2_valik.get() == "Puudub":
            lbl1 = ttk.Label(self.form_frame, text="Tühimass (kg):", font=("Arial", 10))
            lbl1.grid(row=row, column=0, sticky="w", pady=2)
            lbl1.is_extra_field = True
            entry1 = ttk.Entry(self.form_frame)
            entry1.grid(row=row, column=1, sticky="w", pady=2, padx=5)
            entry1.is_extra_field = True
            self.entries["Tühimass"] = entry1

            row += 1
            lbl2 = ttk.Label(self.form_frame, text="Mootori võimsus (kW):", font=("Arial", 10))
            lbl2.grid(row=row, column=0, sticky="w", pady=2)
            lbl2.is_extra_field = True
            entry2 = ttk.Entry(self.form_frame)
            entry2.grid(row=row, column=1, sticky="w", pady=2, padx=5)
            entry2.is_extra_field = True
            self.entries["Võimsus"] = entry2

    def calculate_tax(self):
        try:
            vehicle = self.soiduki_valik.get()
            if not vehicle:
                self.result_label.config(text="Palun vali sõiduki tüüp.")
                return

            # Esmaregistreerimise kuupäev ja vanuse arvutamine
            reg_date_str = self.entries.get("Esmaregistreerimine").get()
            reg_date = datetime.strptime(reg_date_str, "%Y-%m-%d")
            current_year = datetime.now().year
            reg_year = reg_date.year
            age = current_year - reg_year

            total_tax = 0

            if vehicle in ["Sõiduauto", "Kaubik"]:
                # Baasmaks sõltuvalt sõiduki tüübist
                base_tax = 100 if vehicle == "Sõiduauto" else 150

                mass_str = self.entries.get("Täismass").get()
                mass = float(mass_str) if mass_str else 0

                # Näide lisamaksust massi põhjal (näiteks üle 2000 kg)
                extra_mass_tax = 0
                if mass > 2000:
                    extra_mass_tax = (mass - 2000) * 0.2

                co2_tax = 0
                if self.mootori_valik.get() in ["Bensiin", "Diisel", "Hübriid"]:
                    if hasattr(self, 'co2_valik'):
                        co2_standard = self.co2_valik.get()
                        if co2_standard in ["WLTP", "NEDC"]:
                            co2_str = self.entries.get("CO2").get()
                            co2_value = float(co2_str) if co2_str else 0
                            # Näide: kui CO₂ ületab 120 g/km, lisatasu
                            if co2_value > 120:
                                co2_tax = (co2_value - 120) * 1.5
                        elif co2_standard == "Puudub":
                            tühimass_str = self.entries.get("Tühimass").get()
                            voimsus_str = self.entries.get("Võimsus").get()
                            tühimass = float(tühimass_str) if tühimass_str else 0
                            voimsus = float(voimsus_str) if voimsus_str else 0
                            co2_tax = (tühimass * 0.01) + (voimsus * 2)
                    # Hübriidmootorite puhul 50% soodustus
                    if self.mootori_valik.get() == "Hübriid":
                        base_tax *= 0.5
                        extra_mass_tax *= 0.5
                        co2_tax *= 0.5

                total_tax = base_tax + extra_mass_tax + co2_tax

            elif vehicle in ["Mootorratas/ATV", "Ratasmaastikusõiduk", "Traktor"]:
                displacement_str = self.entries.get("Töömaht (cm³)").get()
                displacement = float(displacement_str) if displacement_str else 0
                # Näide arvutusest töömahupõhiselt; minimaalne maks on 50 €
                total_tax = max(50, displacement * 0.05)

            # Vanuse soodustus: 5% allahindlust iga aasta kohta üle 5 aasta (miinimum 50% maksust)
            if age > 5:
                discount = 1 - 0.05 * (age - 5)
                if discount < 0.5:
                    discount = 0.5
                total_tax *= discount

            self.result_label.config(text=f"Arvutatud maksumus: {total_tax:.2f} €")
        except Exception as e:
            self.result_label.config(text=f"Tekkis viga: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = AutomaksKalkulaator(root)
    root.mainloop()
